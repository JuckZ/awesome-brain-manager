import { URL, fileURLToPath } from 'node:url';
import { resolve } from 'path';
import { defineConfig } from 'vite';
import { nodeResolve } from '@rollup/plugin-node-resolve';
import builtins from 'builtin-modules';

import vue from '@vitejs/plugin-vue';
import vueJsx from '@vitejs/plugin-vue-jsx';
import wasm from 'vite-plugin-wasm';
import { svelte } from '@sveltejs/vite-plugin-svelte';
import topLevelAwait from 'vite-plugin-top-level-await';
import { viteStaticCopy } from 'vite-plugin-static-copy';
import nodePolyfills from 'rollup-plugin-polyfill-node';
import { ModuleFormat } from 'rollup';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;
function matchIdentifier(id, pattern) {
    const regexp = new RegExp(`^${pattern.replace('*', '(.*)')}$`);
    const match = id.match(regexp);
    return {
        match: !!match,
        capture: match?.[1],
    };
}

const prod = process.argv[2] === 'production';
const dir = process.env.OUTDIR ? process.env.OUTDIR : 'dest';
const imports: Record<string, string> = {
    // '#config': './src/config/index.js',
    '#ansi-styles': 'node_modules/ansi-styles/index.js',
    // '#supports-color': 'node_modules/supports-color/browser.js',
    '#supports-color': 'node_modules/supports-color/index.js',
};

// @rollup/plugin-node-resolve fix the chalk import problem
const hashPackageResolver = {
    // Use a custom rollup resolver to emulate ESM-style imports
    // mappings in vite
    find: /^#/,
    replacement: '#',
    customResolver(id) {
        for (const [find, replacement] of Object.entries(imports)) {
            const { match, capture } = matchIdentifier(id, find);
            if (match) {
                const replacementPath = resolve(replacement);
                id = capture ? replacementPath.replace('*', capture) : replacementPath;
            }
        }
        return id;
    },
};

// https://vitejs.dev/config/
export default defineConfig({
    build: {
        copyPublicDir: false,
        outDir: dir,
        // 谨慎使用，可能清空其他文件
        // emptyOutDir: true,
        lib: {
            // Could also be a dictionary or array of multiple entry points
            entry: resolve(__dirname, 'src/main.ts'),
            name: 'AwesomeBrainManager',
            // the proper extensions will be added
            fileName: (format: ModuleFormat, entryName: string) => {
                if (format === 'umd') {
                    return 'main.js';
                }
            },
            formats: ['umd'],
        },
        minify: false,
        // sourcemap: 'inline',
        rollupOptions: {
            plugins: [
                nodeResolve({
                    // browser: true
                }),
                nodePolyfills({
                    sourceMap: true,
                }),
            ],
            output: {
                exports: 'named',
                assetFileNames: assetInfo => {
                    if (assetInfo.name == 'style.css') {
                        return 'styles.css';
                    }
                    return assetInfo.name;
                },
            },
            external: [
                'obsidian',
                'electron',
                '@codemirror/autocomplete',
                '@codemirror/collab',
                '@codemirror/commands',
                '@codemirror/language',
                '@codemirror/lint',
                '@codemirror/search',
                '@codemirror/state',
                '@codemirror/view',
                '@lezer/common',
                '@lezer/highlight',
                '@lezer/lr',
                ...builtins,
            ],
        },
    },
    plugins: [
        viteStaticCopy({
            targets: [
                {
                    src: '.hotreload',
                    dest: '',
                },
                {
                    src: 'manifest.json',
                    dest: '',
                },
                {
                    src: 'versions.json',
                    dest: '',
                },
            ],
        }),
        svelte({
            configFile: 'svelte.config.js',
        }),
        wasm(),
        topLevelAwait(),
        vue({
            template: {
                compilerOptions: {
                    isCustomElement: tag => ['webview'].includes(tag),
                },
            },
        }),
        vueJsx(),
    ],
    optimizeDeps: {},
    resolve: {
        alias: [
            {
                find: '@',
                replacement: fileURLToPath(new URL('./src', import.meta.url)),
            },
            // hashPackageResolver,
        ],
    },
});
