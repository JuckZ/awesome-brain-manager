# name: Validate Plugin Entry

# on:
#   pull_request_target:
#     branches:
#       - master
#     paths:
#       - community-plugins.json

# jobs:
#   plugin-validation:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           ref: "refs/pull/${{ github.event.number }}/merge"
#       - uses: actions/setup-node@v2
#       - uses: actions/github-script@v6
#         with:
#           script: |
#             const fs = require('fs');
#             const author = context.payload.pull_request.user.login;
#             const plugins = JSON.parse(fs.readFileSync('community-plugins.json', 'utf8'));
#             const plugin = plugins[plugins.length - 1];
#             const escapeHtml = (unsafe) => unsafe.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;');
#             const errors = [];
#             const addError = (error) => {
#               errors.push(`:x: ${error}`);
#               console.log('Found issue: ' + error);
#             };
#             if (context.payload.pull_request.additions <= context.payload.pull_request.deletions) {
#               // Don't run any validation checks if the user is just modifying existing plugin config
#               return;
#             }
#             if (context.payload.pull_request.changed_files > 1) {
#               addError('You modified files other than `community-plugins.json`.');
#             }
#             // Validate plugin repo
#             let repoInfo = plugin.repo.split('/');
#             if (repoInfo.length !== 2) {
#               addError(`It seems like you made a typo in the repository field ${plugin.repo}`);
#             }
#             let [owner, repo] = repoInfo;
#             let manifest = {};
#             console.log(`Repo info: ${owner}/${repo}`);
#             if (owner.toLowerCase() !== author.toLowerCase()) {
#               addError(`The newly added entry is not at the end, or you are submitting on someone else's behalf. Last plugin in the list is: ${plugin.repo}`);
#             } else {
#               try {
#                 await github.rest.repos.get({ owner, repo });
#               } catch (e) {
#                 addError(`It seems like you made a typo in the repository field ${plugin.repo}`);
#               }
#               try {
#                 let manifestFile = await github.rest.repos.getContent({
#                   owner,
#                   repo,
#                   path: 'manifest.json',
#                 });
#                 manifest = JSON.parse(Buffer.from(manifestFile.data.content, 'base64').toString('utf-8'));
#                 if (manifest.id != plugin.id) {
#                   addError('Plugin ID mismatch, the ID in this repo is not the same as the one in your repo.');
#                 }
#               } catch (e) {
#                 addError(`You don't have a \`manifest.json\` at the root of your repo.`);
#               }
#               try {
#                 let release = await github.rest.repos.getReleaseByTag({
#                   owner,
#                   repo,
#                   tag: manifest.version,
#                 });
#                 const assets = release.data.assets || [];
#                 if (!assets.find(p => p.name === 'main.js')) {
#                   addError('Your latest Release is missing the `main.js` file.');
#                 }
#                 if (!assets.find(p => p.name === 'manifest.json')) {
#                   addError('Your latest Release is missing the `manifest.json` file.');
#                 }
#               } catch (e) {
#                 addError(`Unable to find a release with the tag "${manifest.version}". Make sure that the manifest.json file in your repo points to the correct Github Release\n<details><summary>Log</summary><pre>${escapeHtml(e.toString())}</pre></details>`);
#               }
#             }
#             if (errors.length > 0) {
#               let message = `#### Hello ${author}! <a href="https://obsidian.md"><img align="right" height="30px" src="https://user-images.githubusercontent.com/59741989/139557624-63e6e31f-e617-4041-89ae-78b534a8de5c.png"/></a>\n**I found the following errors in your plugin, ${plugin.name}:**\n\n${errors.join('\n')}\n\n---\n<sup>This check was done automatically.`;
#               await github.rest.issues.createComment({
#                 issue_number: context.issue.number,
#                 owner: context.repo.owner,
#                 repo: context.repo.repo,
#                 body: message
#               });
#               core.setFailed("Failed to validate plugin");
#             } else {
#               if (context.payload.pull_request.labels.indexOf('Changes requested') === -1) {
#                 await github.rest.issues.addLabels({
#                   issue_number: context.issue.number,
#                   owner: context.repo.owner,
#                   repo: context.repo.repo,
#                   labels: ['Ready for review']
#                 });
#               }
#             }
#     permissions:
#       contents: write
#       issues: write
#       pull-requests: write
